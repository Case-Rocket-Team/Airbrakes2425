from ambiance import Atmosphere
import numpy as np
import pandas as pd
import sympy as sp
from scipy.optimize import curve_fit

#CFD Data (Mach number, altitude (ft), angle (degrees), drag (N)
data = [
    (0.8, 20000, -5.33, 114.1),
    (0.8, 20000, 0, 125.3),
    (0.8, 20000, 10, 195.0),
    (0.8, 20000, 20, 295.0),
    (0.8, 20000, 30, 415.2),
    (0.8, 20000, 40, 538.5),
    (0.7, 22000, -5.33, 78.9),
    (0.7, 22000, 0, 85.9),
    (0.7, 22000, 10, 132.0),
    (0.7, 22000, 20, 196.9),
    (0.7, 22000, 30, 273.4),
    (0.7, 22000, 40, 352.5),
    (0.6, 23000, -5.33, 56.1),
    (0.6, 23000, 0, 60.7),
    (0.6, 23000, 10, 92.0),
    (0.6, 23000, 20, 135.4),
    (0.6, 23000, 30, 185.9),
    (0.6, 23000, 40, 237.8),
    (0.6, 24000, -5.33, 53.7),
    (0.6, 24000, 0, 58.4),
    (0.6, 24000, 10, 88.4),
    (0.6, 24000, 20, 129.9),
    (0.6, 24000, 10, 176.6),
    (0.6, 24000, 10, 228.7),
    (0.5, 25000, -5.33, 36.6),
    (0.5, 25000, 0, 39.6),
    (0.5, 25000, 10, 59.1),
    (0.5, 25000, 20, 85.6),
    (0.5, 25000, 30, 116.5),
    (0.5, 25000, 40, 147.4),
    (0.4, 26000, -5.33, 23.2),
    (0.4, 26000, 10, 36.8),
    (0.4, 26000, 20, 53.0),
    (0.4, 26000, 40, 89.3),
    (0.3, 27000, -5.33, 12.8),
    (0.3, 27000, 10, 20.5),
    (0.3, 27000, 20, 29.0),
    (0.3, 27000, 30, 38.5),
    (0.3, 27000, 40, 48.1),
    (0.2, 28000, 30, 17.1),
    (0.2, 28000, 40, 20.8),
    (0.1, 29000, 0, 2.9),
    (0.1, 29000, 30, 6.9),
    (0.6, 20000, -5.33, 62.7),
    (0.6, 20000, 0, 68.3),
    (0.6, 20000, 10, 104.3),
    (0.6, 20000, 20, 153.3),
    (0.6, 20000, 30, 210.2),
    (0.6, 20000, 40, 269.8),
    (0.7, 20000, -5.33, 85.2),
    (0.7, 20000, 0, 93.0),
    (0.7, 20000, 10, 143.5),
    (0.7, 20000, 20, 213.8),
    (0.7, 20000, 30, 298.1),
    (0.7, 20000, 40, 383.6),
    (0.7, 21000, 0, 89.4),
    (0.7, 21000, 10, 137.7),
    (0.7, 21000, 20, 205.3),
    (0.7, 21000, 30, 283.8),
    (0.7, 21000, 40, 367.8),
    (0.8, 21000, -5.33, 109.8),
    (0.8, 21000, 0, 120.3),
    (0.8, 21000, 10, 187.3),
    (0.8, 21000, 20, 282.4),
    (0.8, 21000, 30, 398.0),
    (0.8, 21000, 40, 515.8),
    (0.8, 22000, -5.33, 105.6),
    (0.8, 22000, 0, 115.9),
    (0.8, 22000, 10, 179.6),
    (0.8, 22000, 20, 271.4),
    (0.8, 22000, 30, 381.5),
    (0.8, 22000, 40, 494.6),
    (0.5, 23000, 0, 42.9),
    (0.5, 23000, 10, 64.2),
    (0.5, 23000, 20, 93.2),
    (0.5, 23000, 30, 125.8),
    (0.5, 23000, 40, 160.7),
    (0.7, 23000, 0, 82.7),
    (0.7, 23000, 10, 126.7),
    (0.7, 23000, 20, 188.8),
    (0.7, 23000, 30, 262.3),
    (0.7, 23000, 40, 338.2),
    (0.4, 24000, 10, 40.0),
    (0.4, 24000, 20, 57.4),
    (0.4, 24000, 30, 76.7),
    (0.5, 24000, 10, 61.5),
    (0.5, 24000, 20, 89.5),
    (0.5, 24000, 30, 120.7),
    (0.4, 25000, -5.33, 23.9),
    (0.4, 25000, 0, 26),
    (0.4, 25000, 10, 38.3),
    (0.4, 25000, 30, 74.2),
    (0.4, 25000, 40, 93.2),
    (0.3, 26000, 10, 21.3),
    (0.3, 26000, 20, 30.1),
    (0.3, 26000, 40, 50.1),
    (0.2, 27000, -5.33, 5.3),
    (0.2, 27000, 10, 10.0),
    (0.2, 27000, 20, 13.8),
    (0.2, 27000, 40, 21.8),
    (0.3, 28000, 20, 27.9),
    (0.3, 28000, 40, 46.0),
    (0.1, 30000, 10, 4.4),
    (0.1, 30000, 30, 6.5)
    
]


cda_list = []
theta_list = []

#calculate CDA and store in list with corresponding angle
for mach, alt_ft, angle, drag in data:
    alt_m = alt_ft * 0.3048
    atm = Atmosphere(alt_m)
    rho = atm.density[0]
    a = atm.speed_of_sound[0]
    v = mach * a
    cda = 2 * drag / (rho * v**2)
    cda_list.append(cda)
    print(cda)
    theta_list.append(angle)


#estimate function as quadratic (could make cubic or quartic if needed)
def model_func(cda, a, b, c):
    return a * cda**2 + b * cda + c

#curve fit
params, _ = curve_fit(model_func, cda_list, theta_list)
a,b,c = params
CdA = sp.Symbol('CdA')
theta_expr = a * CdA**2 + b * CdA + c

#pretty equation yay
sp.pprint(sp.simplify(theta_expr), use_unicode = True)
